document.body.innerHTML = '<h1>Hello from JavaScript</h1>'

// * допустим у меня есть файл которой я не хочу отслеживать и тогда создам файл .gitignore и напишу его название
// * добавление файлов git add . (всех) ну и собственно которые не требуются пишутся в файл .gitignore
// * коммит git commit -m "commits text"
// * создать ветку git branch название ; удалить ветку get branch -D название ;переключиться на нее git checkout название; посмотреть ветки git branch;  способ выбрать ветку при создании(или существует) git checkout -b название
// * можно заметить, что когда я переключаюсь из стронних веток в основную(master) удаляются файлы которые принадлежали другим веткам (в веткe readme есть файл readme.md который не будет отображаться в веткe master)
// * для того что бы соеденить ветки пишем git merge название-ветки , будем предполагать что находимся сейчас с ветке master и в нее ,добавляем при этом если другая ветка уже закомиченная как и наша коминить заново не придется  
// * после merge можно удалить ветку которую добавили
// * получаю данные(или устанавливаю) git config --global user.name  из github так же могу зменить его в рамках текущего репозитория git config --global user.name "Nikita" (делаем их глобальными что того чтобы у каждого проекта был этот user.name и user.email)
// * git remote add origin url добавляем наш удаленный репозиторий
// * отправить данные на удаленный репозиторий git push -u origin названиеВетки
// * далее если у нас обновляются данные мы их(доабвляем в локальынй репозиторий комитим) и далее пишем git push
// * копируем удаленный репозиторий куда то в папку  git clone url 
// * допустим кто-то другой изменил код и запушил это в гит то у нас локально нет изменений, для этого пишет git pull чтобы забрать все изменения из удаленного репозитория
// TODO: config тут 
// * команда cat показывает содержимое напримет cat .git/config
// * git config --list выводим весь конфиг (данные в нем могут повторяться т.к. есть уровни --local --global --system) для нужного пишем git config --list --global
// * на самом деле мы установили глобальные параметры и можем удалить локальные (git config --unset user.name или git config --remove-section user то есть удалил секцию user) то есть мы очищаем локальные а сам git config выдаст нам все(то есть там будут глобальные, системные но там не будет локальных т.к. удалили)
// * что то наподобие сниппетов пишу git config --global alias.c config (с = config укоротили название то есть git с === git config)
// * можно передать несколько параметров в alias написав git config alias.sayhi '! echo hello; echo world" заметим что это локально
// * все команды конфига git config -h
// * более подробно в less git help config (информация о config) 
// TODO: createRepo
// * git init инициализируем локальный репозиторий
// * git add добавляет файл(ы) в index и он начинает отслеживаться
// * и для того чтобы окончательно записать его в репозиторий пишет git commit откроется файл где есть данные в коментариях над ними пишем наш комит и закрываем файл после чего комит запостится(кстати те данные с # будут вскоре автоматически удаленны) 
// TODO: права на файлы
// * при создании комита пишется create mode 100644 (первые 3 цифры - 100 значит что это файл, а 644 означают права на тот файл) если файл исполнимый пишется 755 если не исполнимый то будет 644 
// * на виндовс нет отдельных прав на выполнение(они на юникс, то есть у нас чтение = выполнение) и настройка core.filemode=false (нет отдельных прав, у нас одно чтение, которое тоже самое что и выполнение)
// TODO: Git show, кто такие автор и коммиттер